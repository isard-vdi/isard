### START 20_backends.cfg ###
backend be_isard-grafana
  timeout server 300s
  http-request set-header X-JWT-Assertion %[req.cook(isardvdi_session),regsub("^Bearer ","")]
  server isard-grafana isard-grafana:3000 maxconn 10 check port 3000 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_isard-loki
  # Require a JWT token in the Authorization header
  http-request deny content-type 'text/html' string 'Missing Authorization HTTP header' unless { req.hdr(authorization) -m found }

  # get header part of the JWT
  http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')

  # get payload part of the JWT
  http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
  http-request set-var(txn.kid) http_auth_bearer,jwt_payload_query('$.kid')
  http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
  http-request set-var(txn.role) http_auth_bearer,jwt_payload_query('$.data.role_id')

  # Validate the JWT
  http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm'  unless { var(txn.alg) -m str HS256 }
  http-request deny content-type 'text/html' string 'Invalid JWT issuer'  unless { var(txn.iss) -m str isard-authentication }
  http-request deny content-type 'text/html' string 'Invalid JWT Key ID'  unless { var(txn.kid) -m str isardvdi }
  http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless { http_auth_bearer,jwt_verify(txn.alg,"${API_ISARDVDI_SECRET}") -m int 1 }

  http-request set-var(txn.now) date()
  http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }

  # Deny requests that lack sufficient permissions
  http-request deny unless { var(txn.role) -m sub admin }

  http-request set-path %[path,regsub(^/loki/?,/)]
  server isard-loki isard-loki:3100 maxconn 10 check port 3100 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_isard-prometheus
  # Require a JWT token in the Authorization header
  http-request deny content-type 'text/html' string 'Missing Authorization HTTP header' unless { req.hdr(authorization) -m found }

  # get header part of the JWT
  http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')

  # get payload part of the JWT
  http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
  http-request set-var(txn.kid) http_auth_bearer,jwt_payload_query('$.kid')
  http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
  http-request set-var(txn.role) http_auth_bearer,jwt_payload_query('$.data.role_id')

  # Validate the JWT
  http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm'  unless { var(txn.alg) -m str HS256 }
  http-request deny content-type 'text/html' string 'Invalid JWT issuer'  unless { var(txn.iss) -m str isard-authentication }
  http-request deny content-type 'text/html' string 'Invalid JWT Key ID'  unless { var(txn.kid) -m str isardvdi }
  http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless { http_auth_bearer,jwt_verify(txn.alg,"${API_ISARDVDI_SECRET}") -m int 1 }

  http-request set-var(txn.now) date()
  http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }

  # Deny requests that lack sufficient permissions
  http-request deny unless { var(txn.role) -m sub admin }

  http-request set-path %[path,regsub(^/prometheus/?,/)]
  server isard-prometheus isard-prometheus:9090 maxconn 1000 check port 9090 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_bastion_web
  mode tcp
  server bastion 127.0.0.1:1 disabled maxconn 0 check port 1 inter 10s rise 2 fall 3 resolvers mydns init-addr none

backend be_bastion_ssh
  mode tcp
  server bastion 127.0.0.1:1 disabled maxconn 0 check port 1 inter 10s rise 2 fall 3 resolvers mydns init-addr none

### END 20_backends.cfg ###
