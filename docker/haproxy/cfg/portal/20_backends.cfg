### START 20_backends.cfg ###
backend AbuseSystem
  stick-table type ip size 1K expire 5m store http_err_rate(30s)

# backend rate_limiter
#     mode http
#     http-request deny deny_status 429

# backend err_limiter
#     mode http
#     http-request reject

backend be_isard-engine
  server engine isard-engine:5000 check port 5000 inter 5s rise 2 fall 3 resolvers mydns init-addr none

backend be_isard-guacamole
  server guacamole isard-guac:4567 check port 4567 inter 5s rise 2 fall 3 resolvers mydns init-addr none

backend be_isard-websockify
  server websockify isard-websockify:8080 check port 8080 inter 5s rise 2 fall 3 resolvers mydns init-addr none

backend be_isard-authentication
  option forwardfor
  server authentication isard-authentication:1313 maxconn 1000 check port 1313 inter 5s rise 2 fall 3 resolvers mydns init-addr none

backend be_isard-static
  server static isard-static:80 maxconn 1000 check port 80 inter 5s rise 2 fall 3 resolvers mydns

backend be_isard-nc
  server nc-nginx isard-nc-nginx:80 maxconn 1000 check port 80 inter 5s rise 2 fall 3 resolvers mydns init-addr none

backend be_isard-frontend-dev
  http-request set-path /frontend%[path] if { path_reg ^/(?!frontend/) }
  server frontend-dev isard-frontend-dev:5173 maxconn 1000 check port 5173 inter 5s rise 2 fall 3 resolvers mydns init-addr none

backend be_isard-old-frontend-dev
  server frontend-dev isard-old-frontend-dev:8080 maxconn 1000 check port 8080 inter 5s rise 2 fall 3 resolvers mydns init-addr none

backend be_isard-db
  acl authorized http_auth(AuthUsers)
  http-request auth realm AuthUsers unless authorized
  http-request redirect scheme http drop-query append-slash if { path -m str /debug/db }
  http-request replace-path /debug/db/(.*) /\1
  http-request del-header Authorization
  server metrics-db "${RETHINKDB_HOST}":8080 maxconn 10 check port 8080 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_isard-grafana
  timeout server 300s
  http-request set-header X-JWT-Assertion %[req.cook(isardvdi_session),regsub("^Bearer ","")]
  server isard-grafana "${GRAFANA_HOST}":3000 maxconn 10 check port 3000 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_isard-prometheus
  # Require a JWT token in the Authorization header
  http-request deny content-type 'text/html' string 'Missing Authorization HTTP header' unless { req.hdr(authorization) -m found }

  # get header part of the JWT
  http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')

  # get payload part of the JWT
  http-request set-var(txn.iss) http_auth_bearer,jwt_payload_query('$.iss')
  http-request set-var(txn.kid) http_auth_bearer,jwt_payload_query('$.kid')
  http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
  http-request set-var(txn.role) http_auth_bearer,jwt_payload_query('$.data.role_id')

  # Validate the JWT
  http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm'  unless { var(txn.alg) -m str HS256 }
  http-request deny content-type 'text/html' string 'Invalid JWT issuer'  unless { var(txn.iss) -m str isard-authentication }
  http-request deny content-type 'text/html' string 'Invalid JWT Key ID'  unless { var(txn.kid) -m str isardvdi }
  http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless { http_auth_bearer,jwt_verify(txn.alg,"${API_ISARDVDI_SECRET}") -m int 1 }

  http-request set-var(txn.now) date()
  http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }

  # Deny requests that lack sufficient permissions
  http-request deny unless { var(txn.role) -m sub admin }

  http-request set-path %[path,regsub(^/prometheus/?,/)]
  server isard-prometheus isard-prometheus:9090 maxconn 1000 check port 9090 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_isard-webapp
  timeout queue 600s
  timeout server 600s
  timeout connect 600s
  server static "${WEBAPP_HOST}":5000 maxconn 100 check port 5000 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_isard-apiv3
  option forwardfor
  timeout queue 600s
  timeout server 600s
  timeout connect 600s
  http-response set-header Access-Control-Allow-Origin "*"
  server isard-api isard-api:5000 maxconn 1000 check port 5000 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_isard-scheduler
  option forwardfor
  timeout queue 5s
  timeout server 10s
  timeout connect 5s
  http-response set-header Access-Control-Allow-Origin "*"
  server isard-scheduler isard-scheduler:5000 maxconn 1000 check port 5000 inter 5s rise 2 fall 3  resolvers mydns init-addr none

backend be_isard-openapi
  option forwardfor
  timeout queue 5s
  timeout server 5s
  timeout connect 5s
  http-response set-header Access-Control-Allow-Origin "*"
  server isard-openapi isard-openapi:5000 maxconn 10 check port 5000 inter 5s rise 2 fall 3 resolvers mydns init-addr none
### END 20_backends.cfg ###
