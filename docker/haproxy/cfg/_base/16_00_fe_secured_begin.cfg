### START 16_00_fe_secured_begin.cfg ###
frontend  fe_secured
  bind 0.0.0.0:443
  mode tcp
  log global

  # Blacklist & Whitelist
  acl blacklisted src -f /usr/local/etc/haproxy/lists/black.lst -f /usr/local/etc/haproxy/lists/external/black.lst
  acl whitelisted src -f /usr/local/etc/haproxy/lists/white.lst
  tcp-request content set-var(txn.block) str("BLACKLISTED") if blacklisted !whitelisted
  tcp-request content reject if blacklisted !whitelisted 

  # Inspect TCP traffic
  tcp-request inspect-delay 10s
  tcp-request content accept if { req_ssl_hello_type 1 }

  # Domain https traffic
  acl is_domain req.ssl_sni -m str "${DOMAIN}"
  use_backend be_ssl_backend if is_domain

  # Bastion subdomains https traffic
  acl is_bastion_subdomain req_ssl_sni,map_end(/usr/local/etc/haproxy/bastion_domains/subdomains.map) -m found
  acl is_bastion_domain req_ssl_sni,map(/usr/local/etc/haproxy/bastion_domains/individual.map) -m found
  use_backend be_bastion_web if is_bastion_subdomain || is_bastion_domain

  # Bastion subdomains ssh traffic
  ## Note: SSH traffic is encrypted, so we cannot match bastion_domains
  acl is_bastion_ssh req.payload(0,7) -m str "SSH-2.0"
  acl is_bastion_ssh_proxied env(BASTION_SSH_PROXIED) -m str "false"
  use_backend be_bastion_ssh if is_bastion_ssh is_bastion_ssh_proxied

  # In the end, check access through IP
  acl is_forbid_domain_ip env(FORBID_DOMAIN_IP) -m str true
  use_backend be_ssl_backend if !is_forbid_domain_ip

  # Deny the rest of the traffic
  tcp-request content set-var(txn.block) str("UNAUTHORIZED") if !is_bastion_ssh
  tcp-request content reject if !is_bastion_ssh

backend be_ssl_backend
  mode tcp
  server ssl_terminator 127.0.0.1:8443 

frontend  fe_ssl
  bind            0.0.0.0:8443 ssl crt /certs/chain.pem
  mode            http
  timeout         client   3600s
  maxconn         50000
  option          httpclose
  option          tcpka

  acl is_domain hdr(host) -m str "${DOMAIN}"
  acl is_bad_path path_beg -i /.

  # Bad paths
  http-request set-var(txn.block) str("BAD PATH") if is_bad_path
  http-request reject if is_bad_path

  # Security Headers
  #https://cheatsheetseries.owasp.org/cheatsheets/HTTP_Headers_Cheat_Sheet.html
  http-response del-header X-Powered-By
  http-response del-header Server
  http-response set-header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
  http-response add-header X-Frame-Options DENY
  http-response add-header X-XSS-Protection 0
  # http-response set-header Content-Security-Policy:script-src https://<scripts domains> (only in devel)
  http-response add-header Referrer-Policy no-referrer
  http-response add-header X-Content-Type-Options nosniff

  # BEGIN CORS
  http-response add-header Access-Control-Allow-Origin "${CORS}"
  http-response add-header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept, Authorization"
  http-response add-header Access-Control-Max-Age 3628800
  http-response add-header Access-Control-Allow-Methods "GET, POST, PUT, DELETE"
  # END CORS
### END 16_00_fe_secured_begin.cfg ###
